<?php

namespace Jevisla\AlerteBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AlerteRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AlerteRepository extends EntityRepository
{
    public function getAlertesBefore(\Datetime $date)
    {
        return $this->createQueryBuilder('a')
            ->where('a.updatedAt <= :date')                      // Date de modification antérieure à :date
            ->orWhere('a.updatedAt IS NULL AND a.date <= :date') // Si la date de modification est vide, on vérifie la date de création
            ->andWhere('a.reponses IS EMPTY')                // On vérifie que l'annonce ne contient aucune candidature
            ->setParameter('date', $date)
            ->getQuery()
            ->getResult();
    }

    public function getAlertesSingle(\Datetime $date, $id)
    {
        return $this->createQueryBuilder('a')
            ->where('a.id = :id AND a.date <= :date')           // Date de modification antérieure à :date
            ->andWhere('date_diff(a.date, :date) <= 0')
            ->setParameter('date', $date)
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();
    }

    public function getAlertes($page, $nbPerPage, \Datetime $date)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.imageAlerte', 'i')
            ->addSelect('i')
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->where('a.date <= :date')
            ->setParameter('date', $date)
            ->orderBy('a.date', 'DESC')
            ->getQuery();

        $query
        // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page - 1) * $nbPerPage)
        // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query, true);
    }

    public function getAlertesAuthor($page, $nbPerPage, $authorId, \Datetime $date)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.imageAlerte', 'i')
            ->addSelect('i')
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->where('a.authorId = :authorId AND a.date <= :date')
            ->setParameter('authorId', $authorId)
            ->setParameter('date', $date)
            ->orderBy('a.date', 'DESC')
            ->getQuery();

        $query
        // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page - 1) * $nbPerPage)
        // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query, true);
    }

    public function getAlertesAccueil($page, $nbPerPage, \Datetime $date)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.imageAlerte', 'i')
            ->addSelect('i')
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->where('a.date <= :date')
            ->setParameter('date', $date)
            ->orderBy('a.date', 'DESC')
            ->getQuery();

        $query
        // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page - 1) * $nbPerPage)
        // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query, true);
    }

    public function getAlertesReponses($author)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.reponses', 'i')
            ->addSelect('i')
            ->where('a.author = :author')
            ->setParameter('author', $author)
            ->orderBy('a.date', 'DESC')
            ->getQuery();
        $result = $query->getResult();

        return $result;
    }

    public function myFindAll()
    {
        // Méthode 1 : en passant par l'EntityManager
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('a')
            ->from($this->_entityName, 'a');
        // Dans un repository, $this->_entityName est le namespace de l'entité gérée
        // Ici, il vaut donc OC\PlatformBundle\Entity\Advert

        // Méthode 2 : en passant par le raccourci (je recommande)
        $queryBuilder = $this->createQueryBuilder('a');

        // On n'ajoute pas de critère ou tri particulier, la construction
        // de notre requête est finie

        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();

        // On récupère les résultats à partir de la Query
        $results = $query->getResult();

        // On retourne ces résultats
        return $results;
    }

    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');

        // On peut ajouter ce qu'on veut avant
        $qb
            ->where('a.author = :author')
            ->setParameter('author', 'Marine');

        // On applique notre condition sur le QueryBuilder
        $this->whereCurrentYear($qb);

        // On peut ajouter ce qu'on veut après
        $qb->orderBy('a.date', 'DESC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function getAlerteWithCategories(array $categoryNames)
    {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
            ->innerJoin('a.categories', 'c')
            ->addSelect('c');

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb
            ->getQuery()
            ->getResult();
    }

    protected function whereCurrentYear(QueryBuilder $qb)
    {
        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y').'-01-01')) // Date entre le 1er janvier de cette année
            ->setParameter('end', new \Datetime(date('Y').'-12-31'))   // Et le 31 décembre de cette année
        ;
    }

    public function getAlerteWithoutReponses($days)
    {
        $qb = $this->createQueryBuilder('a');

        //    on calcule la date du début de la purge
        $datePurge = new \DateTime();
        $datePurge->sub(new \DateInterval('P'.$days.'D'));

        // conditions
        $qb
            ->where('a.nbReponses = 0')
            ->andWhere('a.updatedAt < :date')
            ->setParameter('date', $datePurge);

        // ordre d'affichage
        $qb->orderBy('a.date', 'DESC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function getAlerteWithCategory($category_name)
    {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
            ->innerJoin('a.categories', 'c')
            ->addSelect('c');
        //$criteres = $qb->expr()->andX();
        //$criteres->add(expr()->in($category_id, 'c.id'));

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $category_name));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb
            ->select('c.id')
            ->getQuery()
            ->getScalarResult();
    }

    public function getAlerteWithCategorie($category_id, \Datetime $date)
    {
        $qb = $this->createQueryBuilder('a');
        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->select('a.id, a.title')
            ->where('a.date <= :date')        // Date de modification antérieure à :date
            ->setParameter('date', $date);
        $qb->andWhere($qb->expr()->in('c.id', $category_id));
        // Enfin, on retourne le résultat
        return $qb
            ->getQuery()
            ->getScalarResult();
    }
}
