<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace Jevisla\MessagerieBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CategoryRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConversationRepository extends EntityRepository
{
    public function getConversation($idInter)
    {
        return $this->createQueryBuilder('a')
            ->where('a.idOne = :intervenant')
            ->orWhere('a.idTwo = :intervenant')
            ->setParameter('intervenant', $idInter)
            ->orderBy('a.id', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function getConversationVoisin($idOne, $idTwo)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.message', 'i')
            ->addSelect('i')
            ->where('a.idOne = :idOne AND a.idTwo = :idTwo')
            ->orWhere('a.idOne = :idTwo AND a.idTwo = :idOne')
            ->setParameter('idOne', $idOne)
            ->setParameter('idTwo', $idTwo)
            ->getQuery()
            ->getResult();
    }

    public function getLastMessage($idOne, $idTwo, $date)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.message', 'i')
            ->addSelect('i')
            ->where('i.dateCreation > :date')
            ->andwhere('a.idOne = :idOne AND a.idTwo = :idTwo')
            ->orWhere('a.idOne = :idTwo AND a.idTwo = :idOne')
            ->setParameter('idOne', $idOne)
            ->setParameter('idTwo', $idTwo)
            ->setParameter('date', $date)
            ->getQuery()
            ->getResult();
    }

    public function getMessagesNonLusAccueil($idInter)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.message', 'i')
            ->addSelect('i')
            ->select('count(i.idUser) as number, i.idUser, a.id')
            ->where('a.idOne = :intervenant OR a.idTwo = :intervenant')
            ->andWhere('i.lu = false AND i.idUser <> :intervenant')
            ->setParameter('intervenant', $idInter)
            ->orderBy('a.id', 'DESC')
            ->groupBy('i.idUser')
            ->getQuery()
            ->getResult();
    }
}
