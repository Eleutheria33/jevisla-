<?php

// src/UserBundle/Repository/UserRepository.php

/**
 * This file is part of the Symfony3.4-coding-standard (phpcs standard).
 *
 * PHP version 7
 *
 * @category PHP
 *
 * @author  Patrick Maina <demosthene33@gmail.com>
 * @license http://spdx.org/licenses/MIT MIT License
 *
 * @see https://github.com/djoos/Symfony2-coding-standard
 */

namespace Jevisla\UserBundle\Repository;

/**
 * UserRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param float $latNE     latitude Nord-Est
     * @param float $latSW     latitude Nord-Est
     * @param float $longNE    latitude Nord-Est
     * @param float $longSW    latitude Nord-Est
     * @param float $latitude  latitude Nord-Est
     * @param float $longitude latitude Nord-Est
     *
     * @return query liste de voisins disponible par zone user
     */
    public function getUsersVoisins($latNE, $latSW, $longNE, $longSW, $latitude, $longitude)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.ficheGoogle', 'i')
            ->addSelect('i')
            ->where('a.latitude <= :latNE')                      // Date de modification antérieure à :date
            ->andWhere('a.latitude >= :latSW') // Si la date de modification est vide, on vérifie la date de création
            ->andWhere('a.longitude <= :longNE')                // On vérifie que l'annonce ne contient aucune candidature
            ->andWhere('a.longitude >= :longSW')
            ->andWhere('a.latitudeNE >= :lat') // Si la date de modification est vide, on vérifie la date de création
            ->andWhere('a.latitudeSW <= :lat')                // On vérifie que l'annonce ne contient aucune candidature
            ->andWhere('a.longitudeNE >= :long')
            ->andWhere('a.longitudeSW <= :long')
            ->setParameter('latNE', $latNE)
            ->setParameter('longNE', $longNE)
            ->setParameter('latSW', $latSW)
            ->setParameter('longSW', $longSW)
            ->setParameter('lat', $latitude)
            ->setParameter('long', $longitude)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param int $id identifiant du voisin
     *
     * @return Query renvoie la fiche google du voisin
     */
    public function getMessageVoisins($id)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.ficheGoogle', 'i')
            ->addSelect('i')
            ->where('a.id = :id')                      // Date de modification antérieure à :date
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();
    }
}
